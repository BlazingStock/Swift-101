

// ****          ****
// **** CLOSURES ****
// ****          ****
// **** CLOSURES ****
// ****          ****
// **** CLOSURES ****
// ****          ****
// **** CLOSURES ****
// ****          ****




// “Closures are self-contained blocks of functionality that can be passed around and used in your code.”

    // Closures can capture and store references to any constant & variable from context in which they are defined. This is known as "closing" over those constants and variables, hence the name “closures.
    // Global and Nested Functions are actually special cases of closure


// Closures can take one of 3 forms:
        // Global functions - are closures that have a name and do not capture any values.
        // Nested functions - are closures that have a name and can capture values from their enclosing function.
    // Closure expressions - are unnamed closures written in a lightweight syntax that can capture values from their surrounding context.



var newNames = ["Alex", "Chris", "Jonathan", "Ewa", "Barry", "Daniela"]

func backwards (s1:String, s2: String) -> Bool {
    return s1 > s2
}


// “For characters in strings, “greater than” means “appears later in the alphabet than” : B > A ; Tom > Tim; Z > A
// “For characters in strings, “less than” means “appears earlier in the alphabet than”  : A < C : Sam < Soft; A < Z

// the

var reversed: () = sort(&newNames, backwards)   // Sort mutates (no 'let') the array and returns a brand new array
var newReversed = sorted(newNames, backwards)   // Sorted doesn't modify the array and returns a new sorted array
// 👆 in the above examples, use Sorted instead of Sort as listed in apple's Swift book

println(reversed)
println(newReversed)




func forwards (s1: String, s2: String) -> Bool {
    return s1 < s2
}
var forwardSort = sorted(newNames, forwards)    // sorted is a Closure



// 👆 The above function and sorting would be easier written using 'Closure Expression Syntax'

    // Closure expression syntax can use constant parameters, variable parameters, and inout parameters.
        // Default values cannot be provided.
        // Variadic parameters can be used if you name the variadic parameter and place it last in the parameter list.
        // Tuples can also be used as parameter types and return types.



newReversed = sorted(newNames, {(s1:String, s2: String) ->

    Bool in return s2 < s1 })

        //👆 “The start of the closure’s body is introduced by the 'in' keyword. ”

// 👆 “for the inline closure expression, the parameters and return type are written inside the curly braces, not outside of them.”


var newForward = sorted(newNames, {(s1:String, s2: String) ->
    Bool in return s2 > s1 })
